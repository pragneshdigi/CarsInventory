{"version":3,"sources":["services/app.service.ts"],"names":["AppService","http","this","carUrl","carDetailsUrl","userUrl","loginUrl","prototype","login","email","password","Error","url","get","map","response","json","catch","handleError","getCar","id","getCarDetails","saveCar","car","post","saveUser","user","error","console","Observable_1","Observable","throw","__decorate","core_1","Injectable","http_1","Http"],"mappings":"g8BAUI,QAAAA,YAAoBC,MAAAC,KAAAD,KAAAA,KAGZC,KAAAC,OAAS,gBACTD,KAAAE,cAAgB,uBAChBF,KAAAG,QAAU,iBACVH,KAAAI,SAAW,kBA2DvB,MAzDIN,YAAAO,UAAAC,MAAA,SAAMC,MAAeC,UAGjB,GAAa,MAATD,MAAe,KAAM,IAAIE,OAAM,oBACnC,IAAgB,MAAZD,SAAkB,KAAM,IAAIC,OAAM,uBAEtC,IAAIC,KAAMV,KAAKI,SAAWG,MAAQ,IAAMC,QAGxC,OAAOR,MAAKD,KAAKY,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAAMA,UAASC,SAC/BC,MAAMf,KAAKgB,cAGpBlB,WAAAO,UAAAY,OAAA,SAAOC,IAEH,GAAU,MAANA,GAAY,KAAM,IAAIT,OAAM,iBAChC,IAAIC,KAAMV,KAAKC,OAASiB,EAExB,OAAOlB,MAAKD,KAAKY,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAAKA,UAASC,SAC9BC,MAAMf,KAAKgB,cAGpBlB,WAAAO,UAAAc,cAAA,SAAcD,IAEV,GAAU,MAANA,GAAY,KAAM,IAAIT,OAAM,iBAChC,IAAIC,KAAMV,KAAKE,cAAgBgB,EAE/B,OAAOlB,MAAKD,KAAKY,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAAKA,UAASC,SAC9BC,MAAMf,KAAKgB,cAGpBlB,WAAAO,UAAAe,QAAA,SAAQC,KAEJ,GAAW,MAAPA,IAAa,KAAM,IAAIZ,OAAM,kBACjC,IAAIC,KAAMV,KAAKC,MAEf,OAAOD,MAAKD,KAAKuB,KAAKZ,IAAKW,KACtBT,IAAI,SAAAC,UAAY,MAAKA,UAASC,SAC9BC,MAAMf,KAAKgB,cAGpBlB,WAAAO,UAAAkB,SAAA,SAASC,MACL,GAAY,MAARA,KAAc,KAAM,IAAIf,OAAM,mBAClC,IAAIC,KAAMV,KAAKG,OAEf,OAAOH,MAAKD,KAAKuB,KAAKZ,IAAKc,MACtBZ,IAAI,SAAAC,UAAY,MAAMA,UAASC,SAC/BC,MAAMf,KAAKgB,cAGZlB,WAAAO,UAAAW,YAAR,SAAoBS,OAEhB,MADAC,SAAQD,MAAMA,OACPE,aAAAC,WAAWC,MAAMJ,MAAMX,OAAOW,OAAS,iBAjEzC3B,WAAUgC,YADtBC,OAAAC,6CAG6BC,OAAAC,QAFjBpC","file":"app.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Http, Response } from \"@angular/http\";\r\nimport { Car } from \"../viewmodels/car\";\r\nimport { User } from \"../viewmodels/user\";\r\nimport { Observable } from \"rxjs/Observable\";\r\n//import { Observable } from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class AppService {\r\n\r\n    constructor(private http: Http)\r\n    { }\r\n\r\n    private carUrl = 'api/cars/car/';    \r\n    private carDetailsUrl = 'api/cars/carDetails/'; \r\n    private userUrl = 'api/cars/user/';\r\n    private loginUrl = 'api/cars/login/';\r\n\r\n    login(email: string, password: string) {\r\n        \r\n    //login(user: User) {\r\n        if (email == null) throw new Error(\"email is required\");\r\n        if (password == null) throw new Error(\"password is required\");\r\n        //if (user == null) throw new Error(\"user is required\");\r\n        var url = this.loginUrl + email + '/' + password;\r\n        //var url = this.carUrl + user;\r\n       \r\n        return this.http.get(url)\r\n            .map(response => <User>response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    getCar(id: string) {\r\n        \r\n        if (id == null) throw new Error(\"id is required\");\r\n        var url = this.carUrl + id;\r\n            \r\n        return this.http.get(url)\r\n            .map(response => <Car>response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    getCarDetails(id: string) {\r\n\r\n        if (id == null) throw new Error(\"id is required\");\r\n        var url = this.carDetailsUrl + id;\r\n\r\n        return this.http.get(url)\r\n            .map(response => <Car>response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    saveCar(car: Car) {        \r\n        \r\n        if (car == null) throw new Error(\"car is required\");\r\n        var url = this.carUrl;\r\n       \r\n        return this.http.post(url, car)\r\n            .map(response => <Car>response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    saveUser(user: User) {\r\n        if (user == null) throw new Error(\"user is required\");\r\n        var url = this.userUrl;\r\n\r\n        return this.http.post(url, user)\r\n            .map(response => <User>response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    private handleError(error: Response) {\r\n        console.error(error);\r\n        return Observable.throw(error.json().error || \"Server error\");\r\n    }\r\n}"]}